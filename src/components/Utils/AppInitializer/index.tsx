'use client';

import { useCallback, useEffect, useState } from 'react';
import useUserStore from '@/stores/userStore';
import LoadingPage from '@/components/LoadingPage';
import { useLogoutUser } from '@/hooks/useLogoutUser';
import { validateUserSession } from '@/services/auth.service';

interface Props {
  children: React.ReactNode;
}

// Initialise l'app au d√©marrage
// ===========================================================================================
export default function AppInitializer({ children }: Props) {
  const [loading, setLoading] = useState(true);
  const { initialized, loadUserDataFromLocalStorage } = useUserStore();
  const { logout } = useLogoutUser();

  // Fonction principale d'initialisation. M√©moris√©e avec useCallback pour m√©moriser la fonction entre les rendus.
  const init = useCallback(async (): Promise<void> => {
    console.log('üü° [AppInit] Initialisation en cours...');
    try {
      // Charge les donn√©es utilisateurs avec la m√©thode du store
      console.log(
        'üì¶ [AppInit] Chargement donn√©es user depuis localStorage...',
      );
      await loadUserDataFromLocalStorage();

      // R√©cup√®re l'√©tat de connexion apr√®s le chargement des donn√©es
      const { isLoggedIn } = useUserStore.getState();
      console.log('üîç [AppInit] isLoggedIn apr√®s chargement:', isLoggedIn);

      // Si non connect√©, ne fait rien
      if (!isLoggedIn) {
        console.log(
          '‚ùï [AppInit] Utilisateur non connect√© ‚Üí skip session validation',
        );
        return;
      }

      // Si oui, v√©rifie la session (validit√© du token)
      console.log('üîê [AppInit] V√©rification session utilisateur...');
      await validateUserSession();
      console.log('‚úÖ [AppInit] Session valide');
    } catch {
      // Redirige si un token √©tait pr√©sent mais invalide
      console.warn(
        '‚ùå [AppInit] Erreur lors de la v√©rification du token, d√©connexion...',
      );
      logout({ redirect: true });
    } finally {
      console.log('üü¢ [AppInit] Initialisation termin√©e');
      setLoading(false);
    }
  }, [loadUserDataFromLocalStorage, logout]);

  useEffect(() => {
    if (!initialized) {
      console.log('üì• [AppInit] Store non initialis√© ‚Üí lancement init()');
      init();
    } else {
      console.log('üì¶ [AppInit] Store d√©j√† initialis√©');
      setLoading(false);
    }

    // Revalidation toutes les heures si utilisateur connect√©
    const intervalId: NodeJS.Timeout = setInterval(async () => {
      const { isLoggedIn } = useUserStore.getState();
      console.log(
        'üîÅ [AppInit] Revalidation p√©riodique. isLoggedIn:',
        isLoggedIn,
      );

      if (!isLoggedIn) return;

      try {
        await validateUserSession();
        console.log('‚úÖ [AppInit] Revalidation OK');
      } catch {
        console.warn('‚ùå [AppInit] Revalidation √©chou√©e, d√©connexion...');
        logout({ redirect: true });
      }
    }, 3600000); // 1h

    return () => {
      clearInterval(intervalId);
      console.log('üßπ [AppInit] Nettoyage intervalle de revalidation');
    };
  }, [initialized, init, logout]);

  if (loading) {
    console.log('‚è≥ [AppInit] Chargement en cours...');
    return <LoadingPage />;
  }

  console.log('üß© [AppInit] App pr√™te, rendu des enfants');
  return <>{children}</>;
}
