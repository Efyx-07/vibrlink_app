import useUserStore from '../userStore';
import { User } from '@/interfaces/user.interface';

// Mock utilisateur pour les tests
const mockUser: User = {
  id: 123,
  email: 'john@example.com',
};

describe('useUserStore', () => {
  beforeEach(() => {
    // Avant chaque test, on r√©initialise l'√©tat du store et on nettoie le localStorage
    useUserStore.setState({
      user: null,
      isLoggedIn: false,
      initialized: false,
    });
    localStorage.clear();
    jest.restoreAllMocks();
  });

  // Test : mise √† jour de l'utilisateur avec setUserData
  // ===========================================================================================
  it('should set user data and update localStorage', () => {
    const store = useUserStore.getState();
    const setItemSpy = jest.spyOn(Storage.prototype, 'setItem');

    store.setUserData(mockUser); // Mise √† jour des donn√©es utilisateur

    const updated = useUserStore.getState();

    // V√©rifie que l'utilisateur a bien √©t√© mis √† jour
    expect(updated.user).toEqual(mockUser);
    expect(updated.isLoggedIn).toBe(true);

    // V√©rifie que les donn√©es ont √©t√© sauvegard√©es dans le localStorage
    expect(setItemSpy).toHaveBeenCalledWith('user', JSON.stringify(mockUser));
  });

  // Test : d√©connexion avec logoutUserLocal
  // ===========================================================================================
  it('should remove user data on logout', () => {
    const removeItemSpy = jest.spyOn(Storage.prototype, 'removeItem');

    // Simule un utilisateur connect√©
    useUserStore.setState({ user: mockUser, isLoggedIn: true });

    useUserStore.getState().logoutUserLocal(); // üîí D√©connexion

    const updated = useUserStore.getState();

    // V√©rifie que l'√©tat a bien √©t√© r√©initialis√©
    expect(updated.user).toBeNull();
    expect(updated.isLoggedIn).toBe(false);

    // V√©rifie que le localStorage a bien √©t√© nettoy√©
    expect(removeItemSpy).toHaveBeenCalledWith('user');
  });

  // Test : sauvegarde directe avec saveUserDataInLocalStorage
  // ===========================================================================================
  it('should save user to localStorage directly', () => {
    useUserStore.setState({ user: mockUser }); // D√©finition d'un utilisateur

    const setItemSpy = jest.spyOn(Storage.prototype, 'setItem');

    useUserStore.getState().saveUserDataInLocalStorage(); // Sauvegarde manuelle

    // V√©rifie que le localStorage contient bien les donn√©es utilisateur
    expect(setItemSpy).toHaveBeenCalledWith('user', JSON.stringify(mockUser));
  });

  // Test : chargement depuis le localStorage si non initialis√©
  // ===========================================================================================
  it('should load user data from localStorage if not initialized', async () => {
    // Pr√©-remplit le localStorage
    localStorage.setItem('user', JSON.stringify(mockUser));

    await useUserStore.getState().loadUserDataFromLocalStorage(); // Chargement

    const updated = useUserStore.getState();

    // V√©rifie que les donn√©es ont bien √©t√© restaur√©es
    expect(updated.user).toEqual(mockUser);
    expect(updated.isLoggedIn).toBe(true);
    expect(updated.initialized).toBe(true);
  });

  // Test : ne charge pas √† nouveau si d√©j√† initialis√©
  // ===========================================================================================
  it('should not load from localStorage if already initialized', async () => {
    useUserStore.setState({ initialized: true }); // Marque comme d√©j√† initialis√©

    const setSpy = jest.spyOn(useUserStore, 'setState');

    await useUserStore.getState().loadUserDataFromLocalStorage(); // Tentative de rechargement

    // V√©rifie qu'aucune mise √† jour n'a √©t√© faite
    expect(setSpy).not.toHaveBeenCalledWith(
      expect.objectContaining({ user: expect.anything() }),
    );
  });
});
